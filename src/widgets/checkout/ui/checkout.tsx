import { useGetRestaurant } from '@entities/restaurant';
import { useGetUser } from '@entities/user';
import { useCreateOrder } from '@features/cart-group/create-order';
import { useUserCart } from '@features/cart-group/user-cart';
import {
  Box,
  Button,
  Container,
  Divider,
  Paper,
  Stack,
  TextField,
  Typography,
} from '@mui/material';
import { MAIL_REGEXP } from '@shared/constants';
import { useNotifications } from '@toolpad/core/useNotifications';
import { useMemo, useState } from 'react';
import { useNavigate, useParams } from 'react-router';

import styles from './checkout.module.css';

export const Checkout = () => {
  const navigate = useNavigate();
  const { seoUrl = '' } = useParams();
  const { data: restaurantData } = useGetRestaurant(seoUrl);
  const restId = Number(restaurantData?.id);
  const { cart, restaurantName, totalPrice } = useUserCart(restId);
  const { data: user } = useGetUser();
  const notifications = useNotifications();

  const [name, setName] = useState(user?.firstName || '');
  const [email, setEmail] = useState(user?.email || '');
  const [comment, setComment] = useState('');

  const createOrderSuccessCallback = () => {
    notifications.show(
      <span>
        –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! <br /> –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏
      </span>,
      { severity: 'success' },
    );

    navigate('/');
  };

  const { mutate: createOrder } = useCreateOrder(createOrderSuccessCallback);

  const emailError = useMemo(() => {
    if (!email)
      return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ';
    return MAIL_REGEXP.test(email) ? '' : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã';
  }, [email]);

  const isFormInvalid = !!emailError;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!!emailError) return;
    createOrder({
      name,
      phone: user?.phone || '',
      email,
      comment,
      tableNumber: 1,
      cartId: cart?.id || 0,
    });
  };

  if (!cart?.products.length) {
    return (
      <Container maxWidth="sm" className={styles['checkout__empty']}>
        <Paper elevation={3} className={styles['checkout__empty-paper']}>
          <Typography variant="h6" color="text.secondary" gutterBottom>
            üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
          </Typography>
          <Typography
            variant="body1"
            color="text.secondary"
            className={styles['checkout__empty-text']}
          >
            –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é
            –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ!
          </Typography>
          <Button
            variant="contained"
            onClick={() => navigate(`/restaurant/${seoUrl}`)}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
          </Button>
        </Paper>
      </Container>
    );
  }

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      className={styles['checkout__form']}
    >
      <Paper elevation={3} className={styles['checkout__paper']}>
        <Stack spacing={2.5}>
          <Box className={styles['checkout__header']}>
            <Box>
              <Typography variant="overline" color="text.secondary">
                –†–µ—Å—Ç–æ—Ä–∞–Ω
              </Typography>
              <Typography variant="h6" fontWeight={700}>
                {restaurantName || '‚Äî'}
              </Typography>
            </Box>
            <Box className={styles['checkout__total']}>
              <Typography variant="overline" color="text.secondary">
                –ò—Ç–æ–≥–æ
              </Typography>
              <Typography variant="h5" color="primary" fontWeight={800}>
                {totalPrice} ‚ÇΩ
              </Typography>
            </Box>
          </Box>

          <Divider />

          <Typography variant="h5" fontWeight={700}>
            –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </Typography>

          <TextField
            label="–ò–º—è"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="–ì–æ—Å—Ç—å"
            fullWidth
            autoComplete="name"
          />

          <TextField
            label="–ü–æ—á—Ç–∞"
            value={email}
            onChange={(e) => setEmail(e.target.value.trim())}
            required
            error={!!emailError}
            helperText={emailError || ' '}
            type="email"
            fullWidth
            autoComplete="email"
          />

          <TextField
            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –±–µ–∑ –ª—É–∫–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫—É—Ä—å–µ—Ä—É"
            fullWidth
            multiline
            minRows={3}
            maxRows={6}
          />

          <Button
            type="submit"
            variant="contained"
            size="large"
            disabled={isFormInvalid}
          >
            –û–ø–ª–∞—Ç–∏—Ç—å
          </Button>
        </Stack>
      </Paper>
    </Box>
  );
};
